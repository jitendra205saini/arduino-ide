#include "DHT.h"
#include <SoftwareSerial.h>
#include <Servo.h>

#define DHTPIN A0
#define DHTTYPE DHT11

char command;
int pos = 90;
int Apos = 90;
int Speed = 0;
DHT dht(DHTPIN, DHTTYPE);
SoftwareSerial bluetooth(0, 1); // RX, TX (Change pin numbers if necessary)
Servo myservo, myservo1, myservo2, myservo3;

#define RPWM 5
#define LPWM 6

bool frontLightsOn = false;
bool brakeLightsOn = false;
bool parkingLightsOn = false;
bool leftLightOn = false;
bool rightLightOn = false;
bool HornOn = false;
bool backsoundOn = false;
bool indigetorOn = false;
bool fanOn = false;

void setup() {
  Serial.begin(9600);
  bluetooth.begin(9600);
  Serial.println("DHTxx test!");

  dht.begin();


  myservo.attach(3);
  myservo1.attach(9);
  myservo2.attach(10);
  myservo3.attach(11);

  pinMode(7, OUTPUT);  // Front      lights
  pinMode(8, OUTPUT);  // Brake      lights
  pinMode(4, OUTPUT);  // Parking    lights
  pinMode(A1, OUTPUT); // leftLight  lights
  pinMode(A2, OUTPUT); // rightLight lights
  pinMode(2, OUTPUT);  // Horn       sounds
  pinMode(12, OUTPUT); // backword   sounds
  pinMode(13, OUTPUT); // indigetor  sounds
  pinMode(A3, OUTPUT); // fan
}

void loop() {
  float h = dht.readHumidity();
  int t = dht.readTemperature();
  float f = dht.readTemperature(true);

  if (isnan(h) || isnan(t) || isnan(f)) {
    Serial.println("Failed to read from DHT sensor!");
    return;
  }

  String message = "     " + String(t);
  Serial.println(message);
  delay(20);

  while (bluetooth.available() > 0) {
    char command = bluetooth.read();

    switch (command) {
      case 'F':
        forward();
        turnBrakeLightsOff();
        turnbacksoundOff();
        break;
      case 'B':
        back();
        turnBrakeLightsOn();
        turnbacksoundOn();
        break;
      case 'R':
        left();
        break;
      case 'L':
        right();
        break;
      case 'J':
        leftBack();
        turnbacksoundOn();
        break;
      case 'I':
        leftForward();
        turnbacksoundOff();
        break;
      case 'H':
        rightBack();
        turnbacksoundOn();
        break;
      case 'G':
        rightForward();
        turnbacksoundOff();
        break;
      case 'W':
        turnFrontLightsOn();
        break;
      case 'w':
        turnFrontLightsOff();
        break;
      case 'U':
        turnBrakeLightsOn();
        break;
      case 'u':
        turnBrakeLightsOff();
        break;
      case 'O':
        turnleftLightOn();
        turnindigetorOn();
        break;
      case 'o':
        turnleftLightOff();
        turnindigetorOff();
        break;
      case 'Z':
        turnrightLightOn();
        turnindigetorOn();
        break;
      case 'z':
        turnrightLightOff();
        turnindigetorOff();
        break; 
       case 'V':
        turnfanOn();
        break;
      case 'v':
        turnfanOff();
        break;    
      case 'X':
        turnparkingLightsOn();
        break;
      case 'x':
        turnparkingLightsOff(); // Corrected function name
        break;
      case 'K':
        turnHornOn();
        break;
      case 'S':
        Hendbreak();
        break;  
      case '0':
        Speed = 100;
        break;
      case '1':
        Speed = 140;
        break;
      case '2':
        Speed = 153;
        break;
      case '3':
        Speed = 165;
        break;
      case '4':
        Speed = 178;
        break;
      case '5':
        Speed = 191;
        break;
      case '6':
        Speed = 204;
        break;
      case '7':
        Speed = 216;
        break;
      case '8':
        Speed = 229;
        break;
      case '9':
        Speed = 242;
        break;
      case '10':
        Speed = 255;
        break;
    }
  }

  // Move servo based on Bluetooth input
  if (bluetooth.available() >= 2) {
    unsigned int servopos = bluetooth.read();
    unsigned int servopos1 = bluetooth.read();
    unsigned int realservo = (servopos1 * 256) + servopos;
    Serial.println(realservo);

    if (realservo >= 300 && realservo < 480) {
      int servo2 = realservo;
      servo2 = map(servo2, 100, 280, 0, 180);
      myservo2.write(servo2);
      Serial.println("servo 2 ON");
    }

    if (realservo >= 500 && realservo < 680) {
      int servo3 = realservo;
      servo3 = map(servo3, 300, 480, 0, 180);
      myservo3.write(servo3);
      Serial.println("servo 3 ON");
    }
  }
}

void forward() {
  digitalWrite(RPWM, LOW);
  analogWrite(LPWM, Speed);
}

void back() {
  analogWrite(RPWM, Speed);
  digitalWrite(LPWM, LOW);
}

void left() {
  pos = 0;
  myservo.write(pos);
}

void right() {
  pos = 170;
  myservo.write(pos);
}

void Hendbreak() {
  Apos = 60;
  myservo1.write(Apos);
}

void leftBack() {
  analogWrite(RPWM, Speed);
  digitalWrite(LPWM, LOW);
  pos = 0;
  myservo.write(pos);
}

void leftForward() {
  digitalWrite(RPWM, LOW);
  analogWrite(LPWM, Speed);
  pos = 0;
  myservo.write(pos);
}

void rightBack() {
  analogWrite(RPWM, Speed);
  digitalWrite(LPWM, LOW);
  pos = 170;
  myservo.write(pos);
}

void rightForward() {
  digitalWrite(RPWM, LOW);
  analogWrite(LPWM, Speed);
  pos = 170;
  myservo.write(pos);
}

void turnFrontLightsOn() {
  digitalWrite(7, HIGH);
  frontLightsOn = true;
}

void turnFrontLightsOff() {
  digitalWrite(7, LOW);
  frontLightsOn = false;
}

void turnBrakeLightsOn() {
  digitalWrite(8, HIGH);
  brakeLightsOn = true;
}

void turnBrakeLightsOff() {
  digitalWrite(8, LOW);
  brakeLightsOn = false;
}

void turnparkingLightsOn() {
  digitalWrite(4, HIGH);
  parkingLightsOn = true; // Corrected variable name
}

void turnparkingLightsOff() {
  digitalWrite(4, LOW);
  parkingLightsOn = false;
}

void turnleftLightOn() {
  digitalWrite(A1, HIGH);
  leftLightOn = true;
}

void turnleftLightOff() {
  digitalWrite(A1, LOW);
  leftLightOn = false;
}

void turnrightLightOn() {
  digitalWrite(A2, HIGH);
  rightLightOn = true;
}

void turnrightLightOff() {
  digitalWrite(A2, LOW);
  rightLightOn = false; // Corrected variable name
}

void turnHornOn() {
  digitalWrite(2, HIGH);
  HornOn = true;
}

void turnHornOff() {
  digitalWrite(2, LOW);
  HornOn = false;
}


void turnbacksoundOn() {
  digitalWrite(12, HIGH);
  backsoundOn = true;
}

void turnbacksoundOff() {
  digitalWrite(12, LOW);
  backsoundOn = false;
}

void turnindigetorOn() {
  digitalWrite(13, HIGH);
  indigetorOn = true;
}

void turnindigetorOff() {
  digitalWrite(13, LOW);
  indigetorOn = false;
}

void turnfanOn() {
  digitalWrite(A3, HIGH);
  fanOn = true;
}

void turnfanOff() {
  digitalWrite(A3, LOW);
  fanOn = false;
}

void Stop() {
  digitalWrite(RPWM, LOW);
  digitalWrite(LPWM, LOW);
  myservo.write(90);
  myservo1.write(90);
}
